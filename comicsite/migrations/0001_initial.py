# Generated by Django 2.0.4 on 2018-05-12 20:18

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('accountid', models.AutoField(db_column='accountID', primary_key=True, serialize=False)),
                ('accountfirstname', models.TextField(blank=True, db_column='accountFirstName', null=True)),
                ('accountlastname', models.TextField(blank=True, db_column='accountLastName', null=True)),
                ('accountemail', models.EmailField(db_column='accountEmail', max_length=254)),
                ('accountusername', models.TextField(db_column='accountUserName')),
                ('accountpassword', models.TextField(db_column='accountPassword')),
                ('accountcity', models.TextField(blank=True, db_column='accountCity', null=True)),
                ('accountpicture', models.ImageField(blank=True, db_column='accountPicture', null=True, upload_to='accounts')),
            ],
            options={
                'db_table': 'account',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AccountPosts',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'account_posts',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Comic',
            fields=[
                ('comicid', models.AutoField(db_column='comicID', primary_key=True, serialize=False)),
                ('comictitle', models.CharField(blank=True, db_column='comicTitle', max_length=50, null=True)),
                ('comicplot', models.TextField(blank=True, db_column='comicPlot', null=True)),
                ('comicpublisher', models.CharField(blank=True, db_column='comicPublisher', max_length=50, null=True)),
                ('comicseries', models.CharField(blank=True, db_column='comicSeries', max_length=50, null=True)),
                ('comicvolume', models.IntegerField(blank=True, db_column='comicVolume', null=True)),
                ('comicissue', models.IntegerField(blank=True, db_column='comicIssue', null=True)),
                ('comicgenre', models.CharField(blank=True, db_column='comicGenre', max_length=45, null=True)),
                ('comicauthor', models.CharField(blank=True, db_column='comicAuthor', max_length=100, null=True)),
                ('comicsynopsis', models.TextField(blank=True, db_column='comicSynopsis', null=True)),
                ('comicrating', models.IntegerField(blank=True, db_column='comicRating', null=True)),
                ('comiccover', models.CharField(blank=True, db_column='comicCover', max_length=50, null=True)),
            ],
            options={
                'db_table': 'comic',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ComicUserContent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'comic_user_content',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='FavoriteComics',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'favorite_comics',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Following',
            fields=[
                ('followingid', models.IntegerField(db_column='followingID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'following',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('postid', models.AutoField(db_column='postID', primary_key=True, serialize=False)),
                ('postcontent', models.TextField(blank=True, db_column='postContent', null=True)),
                ('postdate', models.DateField(blank=True, db_column='postDate', null=True)),
                ('postrating', models.IntegerField(blank=True, db_column='postRating', null=True)),
            ],
            options={
                'db_table': 'post',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('commentid', models.AutoField(default=0, primary_key=True, serialize=False)),
                ('userid', models.IntegerField()),
                ('comicid', models.IntegerField()),
                ('text', models.TextField()),
                ('date', models.DateTimeField()),
            ],
            options={
                'db_table': 'comments',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('ratingid', models.AutoField(default=0, primary_key=True, serialize=False)),
                ('rating', models.IntegerField()),
                ('userid', models.IntegerField()),
                ('comicid', models.IntegerField()),
            ],
            options={
                'db_table': 'ratings',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('userid', models.AutoField(default=0, primary_key=True, serialize=False)),
                ('usercity', models.TextField()),
                ('userpicture', models.ImageField(upload_to='')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
